'use server'

import { connectToDatabase } from "./mongodb";
import { ObjectId, type DeleteResult } from "mongodb";

export interface Influencer {
  id: string;
  name: string;
  handle: string;
  channelId: string;
}

export interface Post {
  /** The unique identifier for the post, generated by MongoDB. */
  id: string;
  /** The ID of the influencer who created the post. Must match an 'id' from the 'influencers' collection. */
  influencerId: string;
  /** The title of the post (e.g., YouTube video title). */
  title: string;
  /** The publication date of the post in ISO 8601 format string. */
  publishedAt: string;
  /** The URL link to the original post/video. */
  link?: string;
  /** The transcript or summary of the post's content. */
  transcript?: string;
}

export interface Trend {
  id: string;
  summary: string;
  createdAt: string;
}

const mapMongoDoc = (doc: any) => {
  if (!doc) return null;
  const { _id, ...rest } = doc;
  return { id: _id.toHexString(), ...rest };
};

export const getInfluencers = async (): Promise<Influencer[]> => {
  const db = await connectToDatabase();
  const influencers = await db.collection("influencers").find({}).sort({ name: 1 }).toArray();
  return influencers.map(mapMongoDoc) as Influencer[];
};

export const getInfluencerById = async (id: string): Promise<Influencer | null> => {
  if (!ObjectId.isValid(id)) return null;
  const db = await connectToDatabase();
  const influencer = await db.collection("influencers").findOne({ _id: new ObjectId(id) });
  return mapMongoDoc(influencer) as Influencer | null;
};

export const addInfluencer = async (influencer: Omit<Influencer, 'id'>): Promise<Influencer> => {
  const db = await connectToDatabase();
  const result = await db.collection("influencers").insertOne(influencer);
  return { ...influencer, id: result.insertedId.toHexString() };
};

export const updateInfluencer = async (id: string, data: Partial<Omit<Influencer, 'id'>>): Promise<Influencer | undefined> => {
    if (!ObjectId.isValid(id)) return undefined;
    const db = await connectToDatabase();
    const result = await db.collection("influencers").findOneAndUpdate(
      { _id: new ObjectId(id) },
      { $set: data },
      { returnDocument: 'after' }
    );
    return mapMongoDoc(result) as Influencer | undefined;
};

export const deleteInfluencer = async (id: string): Promise<DeleteResult> => {
    if (!ObjectId.isValid(id)) return { acknowledged: false, deletedCount: 0 };
    const db = await connectToDatabase();
    
    // Also delete posts associated with this influencer.
    await db.collection("posts").deleteMany({ influencerId: id });
    
    // Now delete the influencer.
    return await db.collection("influencers").deleteOne({ _id: new ObjectId(id) });
};

export const getPosts = async (): Promise<Post[]> => {
  const db = await connectToDatabase();
  const posts = await db.collection("posts").find({}).sort({ publishedAt: -1 }).limit(20).toArray();
  return posts.map(mapMongoDoc) as Post[];
};

export const getAllTranscripts = async (): Promise<string> => {
  const allPosts = await getPosts();
  if (allPosts.length === 0) return "";
  
  const allInfluencers = await getInfluencers();
  const influencerMap = new Map(allInfluencers.map(i => [i.id, i.name]));

  const transcripts = allPosts
    .filter(p => p.transcript)
    .map(p => `Content from ${influencerMap.get(p.influencerId) || 'Unknown'}: ${p.transcript}`).join('\n\n');
  return transcripts;
};

export const getLatestTrend = async (): Promise<Trend | null> => {
  const db = await connectToDatabase();
  const latestTrend = await db.collection("trends").find().sort({ createdAt: -1 }).limit(1).toArray();
  if (latestTrend.length === 0) return null;
  return mapMongoDoc(latestTrend[0]) as Trend | null;
};

export const addTrend = async (summary: string): Promise<Trend> => {
  const db = await connectToDatabase();
  const newTrend = {
    summary,
    createdAt: new Date().toISOString()
  };
  const result = await db.collection("trends").insertOne(newTrend);
  return { ...newTrend, id: result.insertedId.toHexString() };
};